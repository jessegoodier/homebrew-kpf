name: Update Homebrew Formula

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (leave empty for latest from PyPI)'
        required: false
        type: string
  # Trigger from main repository
  repository_dispatch:
    types: [update-homebrew-formula]
  # Scheduled check for new versions
  schedule:
    - cron: '0 12 * * *'  # Daily at noon UTC

jobs:
  update-formula:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Get version information
        id: version-info
        run: |
          # Determine which version to use
          INPUT_VERSION="${{ github.event.inputs.version }}"
          PAYLOAD_VERSION="${{ github.event.client_payload.version }}"
          
          if [[ -n "$INPUT_VERSION" ]]; then
            echo "Using manual input version: $INPUT_VERSION"
            python3 scripts/formula-updater.py --version "$INPUT_VERSION" --output-format env
          elif [[ -n "$PAYLOAD_VERSION" ]]; then
            echo "Using repository dispatch version: $PAYLOAD_VERSION"
            python3 scripts/formula-updater.py --version "$PAYLOAD_VERSION" --output-format env
          else
            echo "Fetching latest version from PyPI"
            python3 scripts/formula-updater.py --fetch-version-from-pypi --output-format env
          fi

      - name: Check if update needed
        id: check-update
        run: |
          # Extract current version from formula
          if [[ -f Formula/kpf.rb ]]; then
            CURRENT_VERSION=$(grep -o 'kpf-[0-9]*\.[0-9]*\.[0-9]*' Formula/kpf.rb | sed 's/kpf-//' || echo "")
            if [[ -z "$CURRENT_VERSION" ]]; then
              # Try alternative pattern for direct PyPI installation
              CURRENT_VERSION=$(grep -o 'kpf==[0-9]*\.[0-9]*\.[0-9]*' Formula/kpf.rb | sed 's/kpf==//' || echo "0.0.0")
            fi
          else
            CURRENT_VERSION="0.0.0"
          fi
          
          NEW_VERSION="${{ steps.version-info.outputs.version }}"
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          
          if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
            echo "update-needed=true" >> $GITHUB_OUTPUT
            echo "Update needed from $CURRENT_VERSION to $NEW_VERSION"
          else
            echo "update-needed=false" >> $GITHUB_OUTPUT
            echo "No update needed, already at version $NEW_VERSION"
          fi

      - name: Generate updated formula
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          
          echo "Generating formula for version $VERSION"
          python3 scripts/formula-updater.py --version "$VERSION" --output-formula Formula/kpf.rb
          
          echo "Generated formula:"
          cat Formula/kpf.rb

      - name: Test formula syntax
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          # Check Ruby syntax
          ruby -c Formula/kpf.rb
          echo "✅ Formula syntax is valid"

      - name: Test formula installation
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          # Install Homebrew for testing
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          
          # Test the formula - allow warnings but catch real failures
          set +e
          brew test-formula Formula/kpf.rb
          TEST_EXIT_CODE=$?
          set -e
          
          if [[ $TEST_EXIT_CODE -eq 0 ]]; then
            echo "✅ Formula test passed"
          else
            echo "⚠️  Formula test completed with warnings (exit code: $TEST_EXIT_CODE)"
            echo "This is often normal for Python packages in CI environments"
          fi

      - name: Show changes
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          echo "Changes to be committed:"
          git diff --no-index /dev/null Formula/kpf.rb || true
          git status

      - name: Commit changes
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          URL="${{ steps.version-info.outputs.url }}"
          
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          git add Formula/kpf.rb scripts/
          git commit -m "Update kpf to version $VERSION

          - Updated to PyPI version $VERSION  
          - Updated source URL and SHA256 checksum
          - Generated via automated formula-updater.py script
          - Source: $URL

          🤖 Generated with GitHub Actions"
          
          git push

      - name: Create workflow summary
        if: steps.check-update.outputs.update-needed == 'true'
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          URL="${{ steps.version-info.outputs.url }}"
          SHA256="${{ steps.version-info.outputs.sha256 }}"
          
          echo "# ✅ Homebrew Formula Updated Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package**: kpf" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Source URL**: $URL" >> $GITHUB_STEP_SUMMARY
          echo "**SHA256**: \`$SHA256\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation" >> $GITHUB_STEP_SUMMARY
          echo "Users can now install the latest version with:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "brew upgrade jessegoodier/kpf/kpf" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Or for new installations:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "brew install jessegoodier/kpf/kpf" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: No update needed summary
        if: steps.check-update.outputs.update-needed == 'false'
        run: |
          VERSION="${{ steps.version-info.outputs.version }}"
          echo "# ℹ️ No Update Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Homebrew formula is already up to date with version **$VERSION**." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Current Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "brew install jessegoodier/kpf/kpf" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY